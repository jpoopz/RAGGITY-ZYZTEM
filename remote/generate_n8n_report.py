"""
Generate n8n Setup Report
Creates comprehensive report of n8n deployment and integration
"""

import os
import sys
import json
import subprocess
from datetime import datetime

sys.stdout.reconfigure(encoding='utf-8')

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DESKTOP_PATH = os.path.join(os.path.expanduser("~"), "Desktop")

def generate_report():
    """Generate n8n setup report"""
    
    report = []
    report.append("# n8n Setup Report - Julian Assistant Suite")
    report.append("")
    report.append(f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    report.append("")
    report.append("---")
    report.append("")
    
    # VPS Status
    report.append("## üîç VPS Discovery")
    report.append("")
    report.append("### n8n Status")
    
    # Check config
    n8n_config_path = os.path.join(BASE_DIR, "config", "n8n_config.json")
    if os.path.exists(n8n_config_path):
        with open(n8n_config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        report.append(f"- **URL:** {config.get('url', 'Not configured')}")
        report.append(f"- **Enabled:** {config.get('enabled', False)}")
        report.append(f"- **Username:** {config.get('auth_user', 'Not set')}")
        report.append("")
    else:
        report.append("- Configuration file not found")
        report.append("")
    
    # Connection Test
    report.append("### Connection Test")
    try:
        from core.n8n_integration import get_n8n
        n8n = get_n8n()
        test_result = n8n.test_connection()
        
        if test_result.get("success"):
            report.append("- ‚úÖ n8n is reachable")
        else:
            report.append(f"- ‚ùå Connection failed: {test_result.get('message', 'Unknown error')}")
    except Exception as e:
        report.append(f"- ‚ùå Error testing connection: {e}")
    
    report.append("")
    
    # Workflows
    report.append("## üîÑ Workflows")
    report.append("")
    workflows_dir = os.path.join(BASE_DIR, "remote", "n8n_workflows")
    
    if os.path.exists(workflows_dir):
        workflow_files = [f for f in os.listdir(workflows_dir) if f.endswith('.json')]
        report.append(f"**Available Workflows:** {len(workflow_files)}")
        report.append("")
        for wf_file in workflow_files:
            report.append(f"- {wf_file}")
    else:
        report.append("Workflows directory not found")
    
    report.append("")
    
    # Integration Status
    report.append("## üîó Julian Assistant Suite Integration")
    report.append("")
    report.append("- ‚úÖ n8n integration module created (`core/n8n_integration.py`)")
    report.append("- ‚úÖ GUI buttons added (Test Connection, Open Dashboard)")
    report.append("- ‚úÖ Event bus integration configured")
    report.append("")
    
    # Next Steps
    report.append("## üìã Next Steps")
    report.append("")
    report.append("1. **SSH into VPS and run setup scripts:**")
    report.append("   ```bash")
    report.append("   cd ~/julian-assistant/remote")
    report.append("   chmod +x *.sh")
    report.append("   ./setup_n8n_complete.sh")
    report.append("   ```")
    report.append("")
    report.append("2. **Configure n8n credentials in Julian Suite:**")
    report.append("   - Open Settings tab")
    report.append("   - Enter n8n URL: `https://vps.julianassistant.com`")
    report.append("   - Enter username: `Julian`")
    report.append("   - Enter password (from VPS setup)")
    report.append("")
    report.append("3. **Import workflows in n8n:**")
    report.append("   - Upload JSON files from `/remote/n8n_workflows/`")
    report.append("   - Configure credentials (Outlook, Google, Discord)")
    report.append("")
    report.append("4. **Test integration:**")
    report.append("   - Click 'Test n8n Connection' in System Maintenance tab")
    report.append("   - Send test event from Julian Suite")
    report.append("   - Verify Discord alerts work")
    report.append("")
    
    report.append("---")
    report.append("")
    report.append("*Report generated by Julian Assistant Suite n8n Integration*")
    report.append("")
    
    # Write report
    report_text = "\n".join(report)
    
    # Save to root
    report_path = os.path.join(BASE_DIR, "n8n_SETUP_REPORT.md")
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(report_text)
    
    # Copy to Desktop
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    desktop_report = os.path.join(DESKTOP_PATH, f"n8n_SETUP_REPORT_{timestamp}.md")
    
    try:
        import shutil
        shutil.copy2(report_path, desktop_report)
        print(f"‚úÖ Report saved to: {report_path}")
        print(f"‚úÖ Desktop copy: {desktop_report}")
    except Exception as e:
        print(f"‚ö†Ô∏è Could not copy to Desktop: {e}")
    
    return report_path

if __name__ == "__main__":
    generate_report()




