"""
Prompt Generator - Generates Markdown Cursor Prompts for complex repairs
"""

import os
import sys
from typing import Dict, List
from datetime import datetime

sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')

BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, BASE_DIR)

try:
    from logger import log
except ImportError:
    def log(msg, category="TROUBLE"):
        print(f"[{category}] {msg}")

class PromptGenerator:
    """Generates Cursor-ready repair prompts"""
    
    def __init__(self):
        log("PromptGenerator initialized", "TROUBLE")
    
    def generate_cursor_prompt(self, issue: Dict, fix: Optional[Dict] = None) -> str:
        """
        Generate a Markdown prompt for Cursor AI
        
        Args:
            issue: Detected issue dictionary
            fix: Optional fix recommendation
        
        Returns:
            Markdown-formatted prompt string
        """
        prompt_parts = []
        
        # Header
        prompt_parts.append("# üîß Repair Prompt - Julian Assistant Suite")
        prompt_parts.append(f"\n**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        
        # Issue Summary
        prompt_parts.append("## üêõ Detected Issue")
        prompt_parts.append(f"\n**Type:** {issue.get('type', 'Unknown')}")
        prompt_parts.append(f"**Severity:** {issue.get('severity', 'UNKNOWN')}")
        prompt_parts.append(f"**Category:** {issue.get('category', 'unknown')}")
        prompt_parts.append(f"**File:** `{issue.get('file', 'unknown')}` (line {issue.get('line', '?')})")
        prompt_parts.append(f"**Timestamp:** {issue.get('timestamp', 'unknown')}\n")
        
        # Error Message
        prompt_parts.append("### Error Message")
        prompt_parts.append("```")
        prompt_parts.append(issue.get('message', 'No message')[:500])
        prompt_parts.append("```\n")
        
        # Fix Recommendation
        if fix:
            prompt_parts.append("## üí° Recommended Fix")
            prompt_parts.append(f"\n**Type:** {fix.get('fix_type', 'unknown')}")
            prompt_parts.append(f"**Description:** {fix.get('description', 'No description')}")
            prompt_parts.append(f"**Confidence:** {fix.get('confidence', 0) * 100:.0f}%")
            prompt_parts.append(f"**Safe to Auto-Fix:** {'‚úÖ Yes' if fix.get('safe', False) else '‚ùå No'}\n")
            
            if fix.get('command'):
                prompt_parts.append("### Command")
                prompt_parts.append("```bash")
                prompt_parts.append(fix['command'])
                prompt_parts.append("```\n")
        
        # Cursor Prompt from Rules
        if issue.get('cursor_prompt'):
            prompt_parts.append("## üìù Cursor Action")
            prompt_parts.append(f"\n{issue['cursor_prompt']}\n")
        
        # Context
        prompt_parts.append("## üìã Context")
        prompt_parts.append("\nThis issue was detected in the Julian Assistant Suite's automated troubleshooting system.")
        prompt_parts.append("Please review the error and apply the recommended fix, or propose an alternative solution.")
        prompt_parts.append("\n**System Path:** `" + BASE_DIR + "`")
        
        # Footer
        prompt_parts.append("\n---\n")
        prompt_parts.append("*Generated by Smart Troubleshooter v7.0.0*")
        
        return "\n".join(prompt_parts)
    
    def generate_batch_prompt(self, issues: List[Dict]) -> str:
        """Generate a prompt for multiple issues"""
        prompt_parts = []
        
        prompt_parts.append("# üîß Batch Repair Prompt - Multiple Issues")
        prompt_parts.append(f"\n**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        prompt_parts.append(f"**Total Issues:** {len(issues)}\n")
        
        # Group by severity
        errors = [i for i in issues if i.get('severity') == 'ERROR']
        warnings = [i for i in issues if i.get('severity') == 'WARNING']
        
        if errors:
            prompt_parts.append(f"## ‚ùå Errors ({len(errors)})")
            for issue in errors[:10]:  # Limit to 10
                prompt_parts.append(f"\n- **{issue.get('type', 'Unknown')}** in `{issue.get('file', 'unknown')}`")
                prompt_parts.append(f"  ```\n  {issue.get('message', '')[:100]}...\n  ```")
        
        if warnings:
            prompt_parts.append(f"\n## ‚ö†Ô∏è Warnings ({len(warnings)})")
            for issue in warnings[:10]:
                prompt_parts.append(f"\n- **{issue.get('type', 'Unknown')}** in `{issue.get('file', 'unknown')}`")
                prompt_parts.append(f"  ```\n  {issue.get('message', '')[:100]}...\n  ```")
        
        prompt_parts.append("\n---\n")
        prompt_parts.append("*Generated by Smart Troubleshooter v7.0.0*")
        
        return "\n".join(prompt_parts)




